**Coach.java, CoachDTO.java:** Had yet another change of heart on how I was going to store the arrival and departure times. This time I have settled on having them as strings with strict custom made _RegEx_ conditions.
**Passenger.java:** Removed the _@Max(9)_ from _numberOfTickets_ as I feel its unnecessary strictness.
**PassengerDTO.java:** Added _CoachID_ to the object so that I could link the two objects properly.
**CoachController.java, PassengerController.java:** Changed _@PutMapping_ to _@PatchMapping_ as I only want to make partial changes to the coach and passenger objects and at the very least it adds flexibility to the code.
**application.properties:** In preparation for testing I altered the file so that it didn't dictate what port the system operated on and instead devolved that to the lower level _.properties_ files.
**data-dev.sql:** Changed some of the preloaded user information to match the criteria required by the front end javascript.
**schema-dev.sql:** Changed the min password length to 6 and changed the arrival and departure times back to type _time_. Think this works but honestly cant remember if I manually tested it today.
**Contact.html:** Created a low effort _Contact Us_ page that contains a spoof email and phone number. Mainly there to make the website feel more complete.
**Destinations.html:** This is now redundant which makes me sad. I had such hopes for some sort of destination search page but I have had to scrap it dues to time constraints.
**Index.html:** Moved the header around and removed the search bar as it wasn't functional. Added some filler text to demonstrate what I want the home page to be and added an _Admin Login_ button to the footer to allow access to admin features.
**index.js:** A script that redirects the user to **adminlogin.html** when the button is pressed.
**Login.html:** General tidying up of the webpage. Added script.
**login.js:** Created a script that checks the inputted email and password against all the emails and passwords in the database to determine whether the user has an account registered or not. upon a successful login it stores the user ID and email in the session storage for later authentication and redirects to **Index.html**.
**PurchasePage.html:** Create a page that allows a user to select the amount of tickets they want to buy and shows the cost in real time.
**purchasepage.js:** A script to fulfil the needs of **PurchasePage.html**. Includes a "GET" method that retrieves selected coaches information and displays it in a table and several functions that allow the plus and minus buttons to live update both the ticket amount and total cost.
**purchasepage.css:** Styling for the purchase page, some is now redundant.
**Signup.html:** Added a login checker.
**signup.js:** Cleanup.
**timetable.html:** Created an unordered table of all coaches departing today. the page contains an empty list that is populated on load.
**timertable.js:** Added a script that performs a "GET" to the database and then displays all the coaches in a table on page load. Also scripted the _Buy Tickets_ button so that it stores the ID and ticket price of the chosen coach in the session storage for later use.
**timetable.css:** Styling for the table within **timetable.html**.
**addcoach.html:** Buried deep within the admin tools, this page allows an admin to create a new coach route. The page has a simple fill out form on it with all the needed details.
**addcoach.js:** The brains behind **addcoach.html**, this script takes all the entered values, checks that they meet the strict _RegEx_ requirements of the database and then packages them up in a **POST** request to it.
**adminLogin.html:** A page accessed by the _Admin Login_ button on the **Index.html** page. Allows a user to login as an admin if they have the right credentials. Currently there is only one admin (me) and there is no way to create any more.
**adminlogin.js:** this script checks that the entered credentials match the **super secret** admin credentials. If they are then a successful login is triggered.
**adminsettings.html:** The page accessed if a user successfully logs in as an admin. Contains several actions including creating, updating and deleting routes.
**adminsettings.js:** A script that redirects the admin to the page that corresponds to the button they pressed.
**checkloggedin.js:** A script that checks if the user is logged in before giving them access to **myaccount.html**. If they aren't logged in then it will redirect them to **Login.html**. 
**checkout.html:** The final page in the purchase page. Provides a summary of the costs, with and without VAT. There is a checkbox that users can tick to confirm that they are VAT exempt, although they will need to provide proof of that before boarding.
**checkout.css:** Styling for **checkout.html**.
**checkout.js:** A script for the checkout, try as I might no payment gateways would allow me to register what they called a **Fake Business** to their very real gateways so I have had to settle for an IOU upon page completion. Once the purchase button is pressed the quantity of tickets and corresponding price are sent to the data base in the form of a **PATCH** request with an alert confirming this and thanking the user. The user is returned to **Index.html** upon completion.
**deletecoach.html;** Another admin exclusive page. It contains an input field for the coach that is to be deleted. on pressing of the _Remove Route_ button a modal appears informing the admin of the steps they need to take before deleting.
**deletecoach.js:** A script that sends a **DELETE** request to the database.
**myaccount.html:** The users home for altering information. Provides links to pages that allow them to update their personal info and ticket info as well as remove tickets from their account and completely wipe their account from the database.
**myaccount.js:** A script that fulfils the needs of **myaccount.html**. If _Update account information_ if pressed then it redirects the user to **updateaccount.html**, if _Add or Remove..._ is pressed then it redirects to **updateticket.html**. If _Delete your ticket..._ is pressed then a modal appears informing the user of how long a refund takes to go through and the general terms and conditions before allowing them to remove the ticket from their account. Finally if _Disable Account_ is pressed then a modal appears informing the user that this means the permanent removal of their account from our systems and that if they wish to use the service again then they will need to sign back up.
**myaccount.js:** A script that does the legwork for the buttons on the page. Has redirect functions for the first two, sends a **"PATCH"** to the data base to reset the ticket quantity and price back to zero for the third and sends a **"DELETE"** for the fourth. Also, on the press of the third button all coach related session storage is deleted and on the fourth all session storage is deleted.
**updateaccount.html:** A page accessed through **myaccount.html**. This page provides a simple form that is already filled out with the users details so that they can easily change the fields they need to.
**updateaccount.js:** A script that allows the user to easily update their information. On page load the script performs a **"GET"** to the server using the ID stored in the session storage to retrieve the users information and pre-populate the form. The user can then change that information as they wish. Once they are happy and press the button the script checks that all their data is legal and then performs a **"PATCH"** to the database with the new info. Redirects back to **myaccount.html** upon successful execution.
**updatecoach.html:** Another admin exclusive. This page allows an admin to select a coach by its ID and then change the values using a simple form.
**updatecoach.js:** A script that allows an admin to easily update a coach, in much the same way as a user can update their information. The key difference is that the admin is asked to input an ID value that is then used to generate the **"GET"** request that populates the form.
**updateticket.html:** A page accessed through **myaccount.html**. Looks and works similarly to **PurchasePage.html** except that the ticket quantity and cost fields are pre-populated with the users information rather than the default.
**updateticket.js:** A script that allows interaction on **updateticket.html**. The script performs a **"GET"** to the coach database on load and then displays the coach that the user has purchased tickets for. It also has functions that pre-load the users current ticket amount and cost into their respective fields. The rest of the functionality is the same as **purchasepage.js** except that upon the final button press the system displays an alert box acknowledging the amount that has changed and either telling the user that a refund will be sent or how to pay their balance.
**HwaApplicationTests.java:** Added classes in preparation for back end testing.
**data-test.sql, schema-test.sql:** Created a mock database and values in preparation for back end testing.